const int ledCount = 10;
int ledPins[] = {2,3,4,5,6,7,1,13};

//include library
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
//Define Variables
#define fsr_pin A0
#define OLED_MOST 11
#define OLED_CLK 12
#define OLED_DC 9
#define OLED_CS 8
#define OLED_RESET 10
#define Light_PIN A0
Adafruit_SSD1306 display(OLED_MOST, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
static const unsigned char PROGMEM Logo[] = {
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B11110000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111000, B11111111, B11111110, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B11111110, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B11111110, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B11111110, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111111, B11110000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B01111111, B10000000, B00000000, B00000000, 
  B00000000, B00100000, B00000000, B00001111, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00111100, B00000000, B11111111, B11111111, B11111100, B00000000, B00000000, 
  B00000000, B00111111, B00000011, B11111111, B11111111, B10001100, B00000000, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00001111, B11111111, B11111111, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00000011, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B11111111, B11111000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00011111, B11111111, B11000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B11100001, B11000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B10000000, B01000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000110, B00000000, B01100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  };
  static const unsigned char PROGMEM dog[] = {
B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B10000000, B00000000, 
  B00000000, B00000000, B00000000, B00000001, B11110011, B11111111, B11100000, B00000000, 
  B00000000, B00000000, B00000000, B00000001, B11110011, B11111111, B11100000, B00000000, 
  B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11100000, B00000000, 
  B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11100000, B00000000, 
  B00000000, B00000000, B00000000, B00000001, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000011, B11111111, B11111111, B11100000, B00000000, 
  B00000000, B00000000, B00000000, B00001111, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00100000, B00000000, B00111111, B11111111, B10000000, B00000000, B00000000, 
  B00000000, B00110000, B00000000, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00111110, B00000111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B00011000, B00000000, B00000000, 
  B00000000, B00111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000001, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00111111, B11111111, B11111100, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00001111, B11111111, B11110000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B11111111, B11100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B11111011, B11100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B11110001, B11100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B11000000, B01100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B00000000, B01100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B10000000, B01110000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 
    };
void setup() {
  Serial.begin(9600);
  Serial.begin(115200);
  // put your setup code here, to run once:
    for(int thisLed = 0;thisLed < ledCount;thisLed++){
    pinMode(ledPins[thisLed],OUTPUT);
    }
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.drawBitmap(23,0,Logo,64,32,WHITE);
  display.display();
}

void loop() {
  // put your main code here, to run repeatedly:
  int fsr_value = analogRead(fsr_pin);
  int led_value = map(fsr_value,0,1023,0,8);
  for(int thisLed = 0; thisLed < ledCount; thisLed++){
    if(thisLed < led_value){
      digitalWrite(ledPins[thisLed],HIGH);
        display.clearDisplay();
        display.drawBitmap(23,0,Logo,64,32,WHITE);
        display.display(); 
      }
    else{
      digitalWrite(ledPins[thisLed],LOW);
        display.clearDisplay();
        display.drawBitmap(23,0,dog,64,32,WHITE);
        display.display();
      }
    }

}
